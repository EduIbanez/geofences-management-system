package es.unizar.iaaa.geofencing.web;

import com.google.common.collect.Lists;
import es.unizar.iaaa.geofencing.model.Geofence;
import es.unizar.iaaa.geofencing.model.Geometry;
import es.unizar.iaaa.geofencing.model.Properties;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.List;

@RestController
public class GeofenceController {

    /**
     * This method creates a new geofence.
     * @param geofence  data of the geofence
     * @return          the geofence created
     */
    @RequestMapping(path="/api/geofences", method=RequestMethod.POST)
    public Geofence createGeofence(@RequestBody Geofence geofence) {
        Integer id = geofence.getId();
        String type = geofence.getType();
        Properties properties = geofence.getProperties();
        Geometry geometry = geofence.getGeometry();
        ArrayList<Double[]> array = new ArrayList<Double[]>();
        array.add(new Double[]{2.0, 0.0});
        array.add(new Double[]{2.0, 2.0});
        array.add(new Double[]{0.0, 2.0});
        array.add(new Double[]{0.0, 0.0});
        return new Geofence(id, type, properties, geometry);
    }

    /**
     * This method returns an array of those geofences that are inside of an area generated by an specific point
     * and a radius.
     * @param limit     maximum of geofences to be returned
     * @param latitude  latitude of a specific point
     * @param longitude longitude of a specific point
     * @param radius    distance to determine the area of a circle, taking the specific point as the center of this circle
     * @return          an array of geofences
     */
    @RequestMapping(path="/api/geofences", method=RequestMethod.GET)
    public List<Geofence> getGeofences(@RequestParam(value = "limit", required = false) Integer limit,
                                       @RequestParam(value = "latitude", required = false) String latitude,
                                       @RequestParam(value = "longitude", required = false) String longitude,
                                       @RequestParam(value = "radius", required = false) Integer radius) {
        ArrayList<Double[]> array = new ArrayList<Double[]>();
        array.add(new Double[]{2.0, 0.0});
        array.add(new Double[]{2.0, 2.0});
        array.add(new Double[]{0.0, 2.0});
        array.add(new Double[]{0.0, 0.0});
        return Lists.newArrayList(new Geofence(1, "Feature", new Properties("Cuadrado"), new Geometry("Polygon", array)),
                new Geofence(2, "Feature", new Properties("Cuadrado"), new Geometry("Polygon", array)),
                new Geofence(3, "Feature", new Properties("Cuadrado"), new Geometry("Polygon", array)));
    }

    /**
     * This method modifies the data of a previously created geofence.
     * @param id        unique identifier representing a specific geofence
     * @param geofence  data of the geofence
     * @return          the geofence modified
     */
    @RequestMapping(path="/api/geofences/{id}", method=RequestMethod.PUT)
    public Geofence modifyGeofence(@PathVariable("id") int id, @RequestBody Geofence geofence) {
        String type = geofence.getType();
        Properties properties = geofence.getProperties();
        Geometry geometry = geofence.getGeometry();
        ArrayList<Double[]> array = new ArrayList<Double[]>();
        array.add(new Double[]{2.0, 0.0});
        array.add(new Double[]{2.0, 2.0});
        array.add(new Double[]{0.0, 2.0});
        array.add(new Double[]{0.0, 0.0});
        return new Geofence(id, type, properties, geometry);
    }

    /**
     * This method deletes the data of a previously created geofence.
     * @param id        unique identifier representing a specific geofence
     * @return          the geofence deleted
     */
    @RequestMapping(path="/api/geofences/{id}", method=RequestMethod.DELETE)
    public Geofence deleteGeofence(@PathVariable("id") int id) {
        ArrayList<Double[]> array = new ArrayList<Double[]>();
        array.add(new Double[]{2.0, 0.0});
        array.add(new Double[]{2.0, 2.0});
        array.add(new Double[]{0.0, 2.0});
        array.add(new Double[]{0.0, 0.0});
        return new Geofence(id, "Feature", new Properties("Cuadrado"), new Geometry("Polygon", array));
    }

    /**
     * This method returns a geofence by id.
     * @param id        unique identifier representing a specific geofence
     * @return          the geofence requested
     */
    @RequestMapping(path="/api/geofences/{id}", method=RequestMethod.GET)
    public Geofence getGeofence(@PathVariable("id") int id) {
        ArrayList<Double[]> array = new ArrayList<Double[]>();
        array.add(new Double[]{2.0, 0.0});
        array.add(new Double[]{2.0, 2.0});
        array.add(new Double[]{0.0, 2.0});
        array.add(new Double[]{0.0, 0.0});
        return new Geofence(id, "Feature", new Properties("Cuadrado"), new Geometry("Polygon", array));
    }

}